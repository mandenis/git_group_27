                 Создать запросы в Postman.

Открываем программу Postman.Нажав collections/new/add a requst ( наборы тест кейсов).Даем название нашей коллекции group_27.
1. Создать запрос get метод.
#  Выбираем сценарий тестов и нажимаем new request.Мы создаем в нашей коллекции group_27 test.Выбираем метод GET. 
   Вводим  url сервера Protocol: http IP: 162.55.220.72 Port: 5005 endpoint: /get_method. Отправляем запрос на сервер и нам приходит
   ответ : "Hello!!". В params задаем изменения теста.Key  вводим name,value Denis.Во второй строке прописываем ключ age, значение 40.
   Присваеваем имя нашему тесту  get_method,сохраням и отправляем запрос. Ответ с сервера приходит в формате json,в которым наши значения.
   Метод GET служит для передачи общедоступной информации. Используется params и данные уходят в url строке.
  
   Тест валидный. Ожидаемый результат совпал с фактическим.

2. Создать запрос метод POST.
#  Добавляем новый test add request. Меняем название на post_method.Вводим  url сервера Protocol: http IP: 162.55.220.72 Port: 5005
   endpoint: /user_info_3.Выбираем метод POST.В params задаем  задачу теста."name":"Denis","age":"40","salary":"50" .Ответ от сервера приходит
   500 Internal Server Error.И описание ошибки.С помощью метода Post передается приватная информация и она вшивается в тело.
   Поэтому используем body. Вводим задачу в body/from-data и отправляем запрос. Ответ от сервера получаем в json формате.В тексте указаны 
   наши значения,а так же отбъект "family" и "u_salary_1_5_year". В объект "family" вложен еще один объект "children" имеющий массив с описанием.
   Объект u_salary_1_5_year имеет значение 200. Фактический результат  совпадает с ожидаемым.

 

3. Создать запрос метод GET.
#  Добавляем новый test add request. Меняем название на get_method2.Вводим  url сервера Protocol: http IP: 162.55.220.72 Port: 5005
   endpoint: /object_info_1.Выбираем метод Get.В params задаем  задачу теста."name":"Denis","age":"40","weight":"118".Ответ от сервера получаем в json формате.
   В тексте указаны наши значения.Ключ weight имеет два значения  "daily_food", "daily_sleep",которые высчитывают наши ежедневные калории
   и количества сна. Фактический результат  совпадает с ожидаемым :
  

4. Создаем запрос метод GET.
#  Добавляем новый test add request. Меняем название на get_method3.Вводим  url сервера Protocol: http IP: 162.55.220.72 Port: 5005
   endpoint : /object_info_2.Выбираем метод GET.В params задаем задачу теста."name":"Denis","age":"40","salary":"50". Сохраняем и отправляем
   запрос. Фактический	результат не совподает с ожидаемым:
  

5. Создаем тест. Запрос метод GET.
#  Добавляем новый test add request. Меняем название на get_method4.Вводим  url сервера Protocol: http IP: 162.55.220.72 Port: 5005
   endpoint : /object_info_3.Выбираем метод GET.В params задаем задачу теста."name":"Denis","age":"40","salary":"50". Сохраняем и отправляем
   запрос.Фактический результат совпал с ожидаемым.


6. Создаем тест. Запрос метод GET/
#  Добавляем новый test add request. Меняем название на grt_method5.Вводим  url сервера Protocol: http IP: 162.55.220.72 Port: 5005
   endpoint : /object_info_4.Выбираем метод GET.В params задаем задачу теста."name":"Denis","age":"40","salary":"50". Сохраняем и отправляем
   запрос.Фактический результат совпал с ожидаемым.

7. Создаем тест . Метод POST.
    Добавляем новый test add request. Меняем название на post_method2.Вводим  url сервера Protocol: http IP: 162.55.220.72 Port: 5005
   endpoint : /user_info_2.Выбираем метод GET.В params задаем задачу теста."name":"Denis","age":"40","salary":"50".Сохраняем и отправляем
   запрос.Фактический результат совпал с ожидаемым.